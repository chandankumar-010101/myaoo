variables:
  FLUTTER_VERSION: 3.0.1

image: cirrusci/flutter:${FLUTTER_VERSION}

.shared_windows_runners:
  tags:
    - shared-windows
    - windows
    - windows-1809

stages:
  - coverage
  - release
  - deploy

code_analyze:
  stage: coverage
  script: [./scripts/code_analyze.sh]
  artifacts:
    reports:
      codequality: code-quality-report.json

code_analyze_beta:
  extends: code_analyze
  image:
    name: cirrusci/flutter:beta
  allow_failure: true

test:
  stage: coverage
  script: [flutter test]

integration_test:
  image: registry.gitlab.com/famedly/company/frontend/flutter-dockerimages/integration/stable:${FLUTTER_VERSION}
  stage: coverage
  services: 
    - name: docker:dind
      alias: docker
  variables:
    # activate container-to-container networking
    FF_NETWORK_PER_BUILD: "true"
    # Tell docker CLI how to talk to Docker daemon.
    DOCKER_HOST: tcp://docker:2375/
    # Use the overlayfs driver for improved performance.
    DOCKER_DRIVER: overlay2
    # Disable TLS since we're running inside local network.
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - chmod 777 -R /dev/kvm
    - adb start-server
    - emulator -avd test -no-audio -no-boot-anim -no-window -accel on -gpu swiftshader_indirect &
    - apk update && apk add docker drill grep
    - chown -R 991:991 integration_test/synapse
    - docker run -d --name synapse --user 991:991 --network=host --volume="$(pwd)/integration_test/synapse/data":/data:rw -p 8008:8008 matrixdotorg/synapse:latest
    - sleep 20
    # create three test user
    - docker exec -i synapse register_new_matrix_user http://localhost:8008 -c /data/homeserver.yaml --user alice --password AliceInWonderland --admin
    - docker exec -i synapse register_new_matrix_user http://localhost:8008 -c /data/homeserver.yaml --user bob --password JoWirSchaffenDas --admin
    - docker exec -i synapse register_new_matrix_user http://localhost:8008 -c /data/homeserver.yaml --user trudy --password HaveIBeenPwned --admin
  script:
    # properly set the homeserver IP for the test
    - sed -i "s/10.0.2.2/$(drill docker | grep -m 1 -P "\d+\.\d+\.\d+.\d+" | awk -F ' ' '{print $NF}')/g" integration_test/users.dart
    - curl docker:8008/_matrix/static/ 2> /dev/null | grep "It works! Synapse is running"
    - git apply ./scripts/enable-android-google-services.patch
    - flutter pub get
    - flutter test integration_test
  tags:
    - famedly
    - docker
  timeout: 20m

build_web:
  stage: coverage
  before_script:
    [sudo apt update && sudo apt install curl -y, ./scripts/prepare-web.sh]
  script: [./scripts/build-web.sh]
  artifacts:
    paths:
      - build/web/

build_web_beta:
  extends: build_web
  image:
    name: cirrusci/flutter:beta
  allow_failure: true

build_windows:
  extends:
    - .shared_windows_runners
  stage: coverage
  before_script: [./scripts/prepare-windows.ps1]
  script: [./scripts/build-windows.ps1]
  artifacts:
    paths:
      - build/windows/runner/Release
  allow_failure: true

build_android_debug:
  stage: coverage
  script: [./scripts/build-android-debug.sh]
  artifacts:
    when: on_success
    paths:
      - build/app/outputs/apk/debug/app-debug.apk
  except:
    - main
    - tags

build_android_apk:
  stage: coverage
  before_script: [./scripts/prepare-android-release.sh]
  script: [./scripts/build-android-apk.sh]
  artifacts:
    when: on_success
    paths:
      - build/android/app-release.apk
  only:
    - main
    - tags

build_android_appbundle:
  stage: coverage
  before_script: [./scripts/prepare-android-release.sh]
  script: [./scripts/release-playstore-beta.sh]
  artifacts:
    when: on_success
    paths:
      - build/android/app-release.aab
  resource_group: playstore_release
  only:
    - main

upload-fdroid:
  stage: release
  before_script:
    - "which ssh-agent || (sudo apt-get update -y && sudo apt-get install openssh-client -y )"
    - "which rsync || (sudo apt-get update -y && sudo apt-get install rsync -y )"
    - "which pcregrep || (sudo apt-get update -y && sudo apt-get install pcregrep -y )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa ssh.fdroid.nordgedanken.dev >> ~/.ssh/known_hosts
  script:
    - cd build/android/
    - export UPDATE_VERSION=$(pcregrep -o1 'version:\s([0-9]*\.[0-9]*\.[0-9]*)\+[0-9]*' ../../pubspec.yaml) && mv app-release.apk "${UPDATE_VERSION}.apk"
    - rsync -rav -e ssh ./ pangea@ssh.fdroid.nordgedanken.dev:/opt/fdroid/pangeachat/repo
    - ssh pangea@ssh.fdroid.nordgedanken.dev -t '/bin/bash -i -l -c "cd /opt/fdroid/pangeachat && source ../fdroidserver-env/bin/activate && fdroid update --verbose && deactivate"'
  needs: ["build_android_apk"]
  resource_group: playstore_release
  allow_failure: true
  only:
    - tags

upload-fdroid-nightly:
  stage: release
  before_script:
    - "which ssh-agent || (sudo apt-get update -y && sudo apt-get install openssh-client -y )"
    - "which rsync || (sudo apt-get update -y && sudo apt-get install rsync -y )"
    - "which pcregrep || (sudo apt-get update -y && sudo apt-get install pcregrep -y )"
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa ssh.fdroid.nordgedanken.dev >> ~/.ssh/known_hosts
  script:
    - cd build/android/
    - export UPDATE_VERSION=$(pcregrep -o1 'version:\s([0-9]*\.[0-9]*\.[0-9]*)\+[0-9]*' ../../pubspec.yaml) && mv app-release.apk "${UPDATE_VERSION}_$(date +%s).apk"
    - rsync -rav -e ssh ./ pangea@ssh.fdroid.nordgedanken.dev:/opt/fdroid/pangeachat-nightly/repo
    - ssh pangea@ssh.fdroid.nordgedanken.dev -t '/bin/bash -i -l -c "cd /opt/fdroid/pangeachat-nightly && source ../fdroidserver-env/bin/activate && fdroid update --verbose && deactivate"'
  needs: ["build_android_apk"]
  resource_group: playstore_release
  allow_failure: true
  only:
    - main

pages:
  needs: ["build_web"]
  stage: deploy
  image: node
  script:
    - cd docs
    - npx tailwindcss -o ./tailwind.css --minify
    - cd ..
    - mv docs public
    - mv build/web/ public/web/
  artifacts:
    paths:
      - public
  only:
    - main

build_linux_x86:
  stage: coverage
  before_script:
    [
      sudo apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install keyboard-configuration -y && sudo apt-get install curl clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev liblzma-dev libjsoncpp-dev cmake-data libjsoncpp1 libsecret-1-dev libsecret-1-0 librhash0 -y,
    ]
  script: [./scripts/build-linux.sh]
  artifacts:
    when: on_success
    paths:
      - build/linux/x64/release/bundle/

build_linux_arm64:
  stage: coverage
  before_script: [flutter upgrade]
  script: [./scripts/build-linux.sh]
  tags: [docker_arm64]
  only:
    - main
    - tags
  allow_failure: true
  artifacts:
    when: on_success
    paths:
      - build/linux/arm64/release/bundle/

build_linux_appimage_x86:
  stage: deploy
  image: appimagecrafters/appimage-builder
  needs: [build_linux_x86]
  only:
    - main
    - tags
  script:
    - cp -r build/linux/x64/release/bundle appimage/PangeaChat.AppDir
    - cd appimage
    - cp PangeaChat.desktop PangeaChat.AppDir/
    - cp AppRun PangeaChat.AppDir/
    - cp ../assets/logo.svg PangeaChat.AppDir/pangeaChat.svg
    - appimagetool -u "zsync|https://gitlab.com/famedly/pangeaChat/-/releases/permalink/latest/downloads/PangeaChat-x86_64.AppImage.zsync" PangeaChat.AppDir
  allow_failure: true
  artifacts:
    when: on_success
    paths:
      - appimage/PangeaChat-x86_64.AppImage
      - appimage/PangeaChat-x86_64.AppImage.zsync

build_linux_appimage_arm64:
  stage: deploy
  image: appimagecrafters/appimage-builder
  needs: [build_linux_arm64]
  tags: [docker_arm64]
  only:
    - main
    - tags
  script:
    - cp -r build/linux/arm64/release/bundle appimage/PangeaChat.AppDir
    - cd appimage
    - cp PangeaChat.desktop PangeaChat.AppDir/
    - cp AppRun PangeaChat.AppDir/
    - cp ../assets/logo.svg PangeaChat.AppDir/pangeachat.svg
    - appimagetool -u "zsync|https://gitlab.com/famedly/pangeachat/-/releases/permalink/latest/downloads/PangeaChat-arm64.AppImage.zsync" PangeaChat.AppDir
  allow_failure: true
  artifacts:
    when: on_success
    paths:
      - appimage/PangeaChat-arm64.AppImage
      - appimage/PangeaChat-arm64.AppImage.zsync

update-dependencies:
  stage: coverage
  needs: []
  tags:
    - docker
  only:
    - schedules
  variables:
    HOST: ${CI_PROJECT_URL}
    UPDATE_BRANCH: ci-bot/dependency-updates
    PRIVATE_TOKEN: ${GITLAB_API_TOKEN}
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_BOT_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "bot@pangea.chat"
    - git config --global user.name "Dependency Update Bot"
    - sudo apt-get update && sudo apt-get install -y curl
  script:
    - ./scripts/update-dependencies.sh
    - git remote set-url --push origin git@gitlab.com:$CI_PROJECT_PATH
    - 'git diff --exit-code || (git checkout -B ${UPDATE_BRANCH} && git add . && git commit -m "chore: Update dependencies" && git push -f origin ${UPDATE_BRANCH} && ./scripts/open-mr.sh)'

.release:
  stage: release
  image: curlimages/curl:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
    - if: '$CI_COMMIT_TAG =~ /^rc\d+\.\d+\.\d+-\d+$/'
  before_script:
    - export RELEASE_TYPE=$(echo $CI_COMMIT_TAG | grep -oE "[a-z]+")
    - export RELEASE_VERSION=$(echo $CI_COMMIT_TAG | grep -oE "\d+\.\d+\.\d+")
    - export PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/pangeachat/${RELEASE_VERSION}"

upload-android:
  extends: .release
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/android/app-release.apk ${PACKAGE_REGISTRY_URL}/pangeachat.apk

upload-web:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/web/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/pangeachat-web.tar.gz

upload-linux-x86:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/linux/x64/release/bundle/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/pangeachat-linux-x86.tar.gz
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file appimage/PangeaChat-x86_64.AppImage ${PACKAGE_REGISTRY_URL}/PangeaChat-x86_64.AppImage
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file appimage/PangeaChat-x86_64.AppImage.zsync ${PACKAGE_REGISTRY_URL}/PangeaChat-x86_64.AppImage.zsync

upload-linux-arm64:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/linux/arm64/release/bundle/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/pangeachat-linux-arm64.tar.gz
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file appimage/PangeaChat-arm64.AppImage ${PACKAGE_REGISTRY_URL}/PangeaChat-arm64.AppImage
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file appimage/PangeaChat-arm64.AppImage.zsync ${PACKAGE_REGISTRY_URL}/PangeaChat-arm64.AppImage.zsync

upload-windows:
  extends: .release
  image: alpine:latest
  script:
    - apk add --no-cache curl zip
    - cd build/windows/runner/Release; zip -r ../../../../package.zip  . ; cd -
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.zip ${PACKAGE_REGISTRY_URL}/pangeachat-windows.zip

upload-playstore:
  stage: release
  before_script: [./scripts/prepare-android-release.sh]
  script: [./scripts/release-playstore.sh]
  resource_group: playstore_release
  only:
    - tags

release:
  extends: .release
  image: registry.gitlab.com/gitlab-org/release-cli:latest

  script:
    - |
      release-cli create --name "Release ${CI_COMMIT_TAG}" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"pangeachat.apk\",\"url\":\"${PACKAGE_REGISTRY_URL}/pangeachat.apk\"}" \
        --assets-link "{\"name\":\"pangeachat-linux-x86.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/pangeachat-linux-x86.tar.gz\"}" \
        --assets-link "{\"name\":\"pangeachat-linux-arm64.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/pangeachat-linux-arm64.tar.gz\"}" \
        --assets-link "{\"name\":\"pangeachat-windows.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/pangeachat-windows.zip\"}" \
        --assets-link "{\"name\":\"pangeachat-web.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/pangeachat-web.tar.gz\"}"
        --assets-link "{\"name\":\"PangeaChat-x86_64.AppImage\",\"url\":\"${PACKAGE_REGISTRY_URL}/PangeaChat-x86_64.AppImage\",\"filepath\":\"/PangeaChat-x86_64.AppImage\"}"
        --assets-link "{\"name\":\"PangeaChat-x86_64.AppImage.zsync\",\"url\":\"${PACKAGE_REGISTRY_URL}/PangeaChat-x86_64.AppImage.zsync\",\"filepath\":\"/PangeaChat-x86_64.AppImage.zsync\"}"
        --assets-link "{\"name\":\"PangeaChat-arm64.AppImage\",\"url\":\"${PACKAGE_REGISTRY_URL}/PangeaChat-arm64.AppImage\",\"filepath\":\"/PangeaChat-arm64.AppImage\"}"
        --assets-link "{\"name\":\"PangeaChat-arm64.AppImage.zsync\",\"url\":\"${PACKAGE_REGISTRY_URL}/PangeaChat-arm64.AppImage.zsync\",\"filepath\":\"/PangeaChat-arm64.AppImage.zsync\"}"
